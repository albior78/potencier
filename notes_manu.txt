créer le nouveau projet
    ->symfony new nomprojet --full (--full pour avoir toutes les options) -->
préparer le déploiement symfonyCloud
    ->symfony project:init (cela crèè 3 fichiers)
        dossier: .symfony avec 2 fichiers routes.yaml & services.yaml
        1 fichier: .symfony.cloud.yaml
            dans ce fichier modifier la version php utilisé, ici 8.0 par 7.4 et activer les 
            lignes 7.4 qui suivent
    Gitter l'ensemble
        ->git add .
        ->git commit -m 'initialisation sumfony cloud'
Créer le projet sur le cloud
    ->symfony project:create --title="nonprojet" --plan=development
Déploier sur le cloud
    ->symfony deploy
ouvrir chrome à partir du cloud
    ->symfony open:remote
------
info:
pour avoir la liste des projects sur le cloud
    ->symfony projects (bien relever le n°ID du projet si on veut l'effacer)
pour effacer un projet sur le cloud
    ->symfony project:delete --project=n°ID
------
Gitter après chaque journées de programmation && sauvegarder votre depot sur gitlab github
ou gitbucket.
Déploier également sur le cloud
    ->symfony deploy
--------------------------------------------------
BDD postgresql avec Doker

créer le fichier docker-compose.yaml
    ->php bin/console make:docker:database
        choisir postgresql
éditer le fichier docker-compose.yaml
    modifier la ligne avec:  image: 'postgres:13.4'
éditer le fichier doctrine.yaml qui se trouve dans config package
    rajouter en dessous DBAL : server_version: '13.4'
éditer le fichier .env
    placer: DATABASE_URL="postgresql://127.0.0.1:5432/db?serverVersion=13&charset=utf8"
arrêter le server
    ->symfony server:stop x2
crée la database dans docker (le service se lance avec une database créee)
    ->docker-compose up -d
pour supprimer cette database
    ->docker-compose down
pour lister les containers docker
    ->docker-compose ps
pour avoir les logs de création
    ->docker-compose logs
lancer le serveur
    ->symfony serve -d
pour lister les variables d'environement
    ->symfony var:export --multiline
pour faire une migration fichier (préparation) il faut utiliser symfony console
et non php bin/console
    ->symfony console make:migration
migration vers la BDD docker
    ->symfony console doctrine:migrations:migrate
---------------------------------------------------------------
mettre en place un Worflow Git avec redis
    -dans php.ini vérifier extension=redis activer (retirer le ; devant)
     si pas present dans .ini télécharger chez pecl l'extension
    -créer une branche git en locale  dans qui bascule sur la branche implent_redis
        ->git checkout -b implent_redis
    -rajouter dans .symfony.cloud.yaml
        -> - redis (sous extentions:)
        -> redis: "rediscache:redis" (sous database: "bd:postgresql")
    -rajouter dans .symfony/services.yaml
        ->rediscache: (au même niveau que db)
            type: redis:5.0
    -rajouter dans /config/packages/framework.yaml
        -> '%ev(REDIS_URL)%' (derrière handler_id: (à la place de null)
    -rajouter le service redis à docker dans docker-compose.yaml
        ->redis:
            image: redis:5-alpine
            ports:
                - "6379"
    -stopper docker
        ->docker-compose stop
    -relancer tous les services docker-compose
        ->docker-compose up -d
    -mettre a jour la branche implent_redis
        ->git add .
        ->git commit -m 'mise en place redis'
    -créer la branche implent_redis sur symfonyCloud
        ->symfony env:create
    -fusionner implent_redis sur master symfonyCloud
        ->symfony env:sync
    -on peut passer en mode debug avant de deployer
        ->symfony env:debug
    -et repasser en mode prod
        ->symfony env:debug --off
        si on fait ->symfony open:remote on peut voir la barre symfony de debug en bas
    -revenir sur le master en local
        ->git checkout master
    -fusionner la branche implent_redis avec le master
        ->git merge implent_redis
    -deployer
        ->symfony deploy
    -supprimer en locale la branche
        ->git branch -d implent_redis
    -supprimer la branch sur le sumfonycloud
        ->symfony env:delete --env=implent_redis --no-interaction
--------------------------------------------------------------------------
rajouter une gestion des messages(d'attentes) en asynchrone avec RabbitMQ dans docker
    installer messenger (voir 18.2 du livre)
        ->symfony composer req messenger
    modifier /config/packages/messenger.yaml
        async: '%env(RABBITMQ_DSN)%' (en desous en décalé de transports:)
        App\Message\CommentMessage: async (en dessous en décalé de routing:)
    installer rabbitMQ dans docker
        modifier docker-compose.yaml (en dessous services en décalé)
            rabbitmq:
                image: rabbitmq:3.9.5-management
                ports:
                    - '5672'
                    - '15672'
        stopper les services docker
            ->docker-compose stop
        relancer les services docker
            ->docker-compose up -d (pour info: -d tache de fond)
    Explorer l'interface web de gestion de RabbitMQ
        ->symfony open:local:rabbitmq
            username & mdp: guest

pour sauvegarder la BDD dans de docker:
    ->docker-compose exec nomdelabase pg_dump --data-only > dump.sql
pour la restauration:
    ->docker-compose exec nomdelabase psql < dump.sql

